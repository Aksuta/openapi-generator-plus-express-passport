const {{constantName (concat nativeType 'Keys')}}: string[] = [{{#each properties}}{{{stringLiteral name}}}{{#hasMore}}, {{/hasMore}}{{/each}}]

export function model{{className nativeType}}FromJson(name: string, value: any): {{nativeType}} {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	// TODO if we don't ignore unknown properties
	const keys = Object.keys(value)
	for (const key of keys) {
		if ({{constantName (concat nativeType 'Keys')}}.indexOf(key) === -1) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in {{nativeType}}): ${key}`)
		}
	}
	{{#if discriminator}}

	switch (value.{{discriminator.name}}) {
		{{#each discriminatorValues}}
		case {{{value}}}:
			return {{>frag/fromJson model}}(name, value)
		{{/each}}
	}

	throw `Invalid value for ${name}: didn't contain a known discriminator value: ${value.{{discriminator.name}}`
	{{/if}}
	{{#if implementors}}
	{{#each implementors}}
	try {
		return {{>frag/fromJson .}}(name, value)
	} catch (error) {

	}
	{{/each}}

	throw `Invalid type for ${name}: didn't match any subtype`
	{{else}}

	{{#if parent}}
	const result: Partial<{{nativeType}}> = {{>frag/fromJson parent}}(name, value)
	{{else}}
	const result: Partial<{{nativeType}}> = {}
	{{/if}}
	{{#if properties}}

	{{#each properties}}
	{{#if required}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNull({{>frag/fromJson}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = {{>frag/fromJson}}(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{else}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNullOrUndefined({{>frag/fromJson}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = allowUndefined({{>frag/fromJson}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{/if}}
	{{/each}}
	{{/if}}

	return result as {{nativeType}}
	{{/if}}
}

export function model{{className nativeType}}ToJson(name: string, value: {{nativeType}}): any {
	if (typeof value !== 'object' || value === undefined || value === null) {
		throw `Invalid type for ${name}: expected object got ${typeof value}`
	}

	// TODO if we don't ignore unknown properties
	const keys = Object.keys(value)
	for (const key of keys) {
		if ({{constantName (concat nativeType 'Keys')}}.indexOf(key) === -1) {
			// throw `Unexpected key: ${key}`
			console.warn(`Unexpected key in {{nativeType}}): ${key}`)
		}
	}

	const result: any = {}

	{{#each properties}}
	{{#if required}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNull({{>frag/toJson}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = {{>frag/toJson}}(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{else}}
	{{#if nullable}}
	result[{{{stringLiteral name}}}] = allowNullOrUndefined({{>frag/toJson}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{else}}
	result[{{{stringLiteral name}}}] = allowUndefined({{>frag/toJson}})(`${name}.{{name}}`, value[{{{stringLiteral name}}}])
	{{/if}}
	{{/if}}
	{{/each}}

	return result
}
{{#if models}}

{{#each models}}
{{#if (isEnum)}}
{{>validationEnum}}
{{else}}
{{>validationGeneric}}
{{/if}}

{{/each}}
{{/if}}
